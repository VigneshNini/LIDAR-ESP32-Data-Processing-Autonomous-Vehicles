// Generated by gencpp from file opencv_services/box_positionResponse.msg
// DO NOT EDIT!


#ifndef OPENCV_SERVICES_MESSAGE_BOX_POSITIONRESPONSE_H
#define OPENCV_SERVICES_MESSAGE_BOX_POSITIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace opencv_services
{
template <class ContainerAllocator>
struct box_positionResponse_
{
  typedef box_positionResponse_<ContainerAllocator> Type;

  box_positionResponse_()
    : box_position()
    , width(0.0)
    , height(0.0)
    , angle(0.0)  {
    }
  box_positionResponse_(const ContainerAllocator& _alloc)
    : box_position(_alloc)
    , width(0.0)
    , height(0.0)
    , angle(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _box_position_type;
  _box_position_type box_position;

   typedef float _width_type;
  _width_type width;

   typedef float _height_type;
  _height_type height;

   typedef float _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::opencv_services::box_positionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_services::box_positionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct box_positionResponse_

typedef ::opencv_services::box_positionResponse_<std::allocator<void> > box_positionResponse;

typedef boost::shared_ptr< ::opencv_services::box_positionResponse > box_positionResponsePtr;
typedef boost::shared_ptr< ::opencv_services::box_positionResponse const> box_positionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_services::box_positionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_services::box_positionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::opencv_services::box_positionResponse_<ContainerAllocator1> & lhs, const ::opencv_services::box_positionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.box_position == rhs.box_position &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::opencv_services::box_positionResponse_<ContainerAllocator1> & lhs, const ::opencv_services::box_positionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace opencv_services

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::opencv_services::box_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_services::box_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_services::box_positionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_services::box_positionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_services::box_positionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_services::box_positionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_services::box_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beedaf09f28a23b8f0017b5719f68c68";
  }

  static const char* value(const ::opencv_services::box_positionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbeedaf09f28a23b8ULL;
  static const uint64_t static_value2 = 0xf0017b5719f68c68ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_services::box_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_services/box_positionResponse";
  }

  static const char* value(const ::opencv_services::box_positionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_services::box_positionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point box_position  # Response: 3D position of the box\n"
"float32 width  # Width of the bounding box\n"
"float32 height  # Height of the bounding box\n"
"float32 angle  # Angle of the bounding box (missing field)\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::opencv_services::box_positionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_services::box_positionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box_position);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct box_positionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_services::box_positionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_services::box_positionResponse_<ContainerAllocator>& v)
  {
    s << indent << "box_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.box_position);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_SERVICES_MESSAGE_BOX_POSITIONRESPONSE_H
