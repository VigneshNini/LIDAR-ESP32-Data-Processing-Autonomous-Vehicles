// Generated by gencpp from file rosdemo_v4/GetErrorIDResponse.msg
// DO NOT EDIT!


#ifndef ROSDEMO_V4_MESSAGE_GETERRORIDRESPONSE_H
#define ROSDEMO_V4_MESSAGE_GETERRORIDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosdemo_v4
{
template <class ContainerAllocator>
struct GetErrorIDResponse_
{
  typedef GetErrorIDResponse_<ContainerAllocator> Type;

  GetErrorIDResponse_()
    : error_id()
    , res(0)  {
    }
  GetErrorIDResponse_(const ContainerAllocator& _alloc)
    : error_id(_alloc)
    , res(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _error_id_type;
  _error_id_type error_id;

   typedef int32_t _res_type;
  _res_type res;





  typedef boost::shared_ptr< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetErrorIDResponse_

typedef ::rosdemo_v4::GetErrorIDResponse_<std::allocator<void> > GetErrorIDResponse;

typedef boost::shared_ptr< ::rosdemo_v4::GetErrorIDResponse > GetErrorIDResponsePtr;
typedef boost::shared_ptr< ::rosdemo_v4::GetErrorIDResponse const> GetErrorIDResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator1> & lhs, const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator2> & rhs)
{
  return lhs.error_id == rhs.error_id &&
    lhs.res == rhs.res;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator1> & lhs, const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosdemo_v4

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15273c96ecb6b320e7c1e60e17abe5ab";
  }

  static const char* value(const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15273c96ecb6b320ULL;
  static const uint64_t static_value2 = 0xe7c1e60e17abe5abULL;
};

template<class ContainerAllocator>
struct DataType< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosdemo_v4/GetErrorIDResponse";
  }

  static const char* value(const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] error_id\n"
"int32 res\n"
;
  }

  static const char* value(const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_id);
      stream.next(m.res);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetErrorIDResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosdemo_v4::GetErrorIDResponse_<ContainerAllocator>& v)
  {
    s << indent << "error_id[]" << std::endl;
    for (size_t i = 0; i < v.error_id.size(); ++i)
    {
      s << indent << "  error_id[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.error_id[i]);
    }
    s << indent << "res: ";
    Printer<int32_t>::stream(s, indent + "  ", v.res);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSDEMO_V4_MESSAGE_GETERRORIDRESPONSE_H
