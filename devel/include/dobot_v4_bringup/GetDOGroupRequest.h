// Generated by gencpp from file dobot_v4_bringup/GetDOGroupRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_V4_BRINGUP_MESSAGE_GETDOGROUPREQUEST_H
#define DOBOT_V4_BRINGUP_MESSAGE_GETDOGROUPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot_v4_bringup
{
template <class ContainerAllocator>
struct GetDOGroupRequest_
{
  typedef GetDOGroupRequest_<ContainerAllocator> Type;

  GetDOGroupRequest_()
    : index_group()  {
    }
  GetDOGroupRequest_(const ContainerAllocator& _alloc)
    : index_group(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _index_group_type;
  _index_group_type index_group;





  typedef boost::shared_ptr< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetDOGroupRequest_

typedef ::dobot_v4_bringup::GetDOGroupRequest_<std::allocator<void> > GetDOGroupRequest;

typedef boost::shared_ptr< ::dobot_v4_bringup::GetDOGroupRequest > GetDOGroupRequestPtr;
typedef boost::shared_ptr< ::dobot_v4_bringup::GetDOGroupRequest const> GetDOGroupRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator1> & lhs, const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator2> & rhs)
{
  return lhs.index_group == rhs.index_group;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator1> & lhs, const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot_v4_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0e68dd2a6c5d9ec0da555bc42ff9f56";
  }

  static const char* value(const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0e68dd2a6c5d9ecULL;
  static const uint64_t static_value2 = 0x0da555bc42ff9f56ULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot_v4_bringup/GetDOGroupRequest";
  }

  static const char* value(const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] index_group\n"
;
  }

  static const char* value(const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index_group);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDOGroupRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot_v4_bringup::GetDOGroupRequest_<ContainerAllocator>& v)
  {
    s << indent << "index_group[]" << std::endl;
    for (size_t i = 0; i < v.index_group.size(); ++i)
    {
      s << indent << "  index_group[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.index_group[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_V4_BRINGUP_MESSAGE_GETDOGROUPREQUEST_H
