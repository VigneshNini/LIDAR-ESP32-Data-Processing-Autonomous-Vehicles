// Generated by gencpp from file dobot_v4_bringup/InverseKinRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_V4_BRINGUP_MESSAGE_INVERSEKINREQUEST_H
#define DOBOT_V4_BRINGUP_MESSAGE_INVERSEKINREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot_v4_bringup
{
template <class ContainerAllocator>
struct InverseKinRequest_
{
  typedef InverseKinRequest_<ContainerAllocator> Type;

  InverseKinRequest_()
    : X(0.0)
    , Y(0.0)
    , Z(0.0)
    , Rx(0.0)
    , Ry(0.0)
    , Rz(0.0)
    , useJointNear()
    , jointNear()
    , user()
    , tool()  {
    }
  InverseKinRequest_(const ContainerAllocator& _alloc)
    : X(0.0)
    , Y(0.0)
    , Z(0.0)
    , Rx(0.0)
    , Ry(0.0)
    , Rz(0.0)
    , useJointNear(_alloc)
    , jointNear(_alloc)
    , user(_alloc)
    , tool(_alloc)  {
  (void)_alloc;
    }



   typedef double _X_type;
  _X_type X;

   typedef double _Y_type;
  _Y_type Y;

   typedef double _Z_type;
  _Z_type Z;

   typedef double _Rx_type;
  _Rx_type Rx;

   typedef double _Ry_type;
  _Ry_type Ry;

   typedef double _Rz_type;
  _Rz_type Rz;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _useJointNear_type;
  _useJointNear_type useJointNear;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _jointNear_type;
  _jointNear_type jointNear;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _user_type;
  _user_type user;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tool_type;
  _tool_type tool;





  typedef boost::shared_ptr< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> const> ConstPtr;

}; // struct InverseKinRequest_

typedef ::dobot_v4_bringup::InverseKinRequest_<std::allocator<void> > InverseKinRequest;

typedef boost::shared_ptr< ::dobot_v4_bringup::InverseKinRequest > InverseKinRequestPtr;
typedef boost::shared_ptr< ::dobot_v4_bringup::InverseKinRequest const> InverseKinRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator1> & lhs, const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator2> & rhs)
{
  return lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.Z == rhs.Z &&
    lhs.Rx == rhs.Rx &&
    lhs.Ry == rhs.Ry &&
    lhs.Rz == rhs.Rz &&
    lhs.useJointNear == rhs.useJointNear &&
    lhs.jointNear == rhs.jointNear &&
    lhs.user == rhs.user &&
    lhs.tool == rhs.tool;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator1> & lhs, const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot_v4_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "daa39f7c3a16f8ba2a8e9554e9b7e0ae";
  }

  static const char* value(const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdaa39f7c3a16f8baULL;
  static const uint64_t static_value2 = 0x2a8e9554e9b7e0aeULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot_v4_bringup/InverseKinRequest";
  }

  static const char* value(const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 X\n"
"float64 Y\n"
"float64 Z\n"
"float64 Rx\n"
"float64 Ry\n"
"float64 Rz\n"
"string  useJointNear \n"
"string  jointNear\n"
"string  user\n"
"string  tool\n"
;
  }

  static const char* value(const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.Z);
      stream.next(m.Rx);
      stream.next(m.Ry);
      stream.next(m.Rz);
      stream.next(m.useJointNear);
      stream.next(m.jointNear);
      stream.next(m.user);
      stream.next(m.tool);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct InverseKinRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot_v4_bringup::InverseKinRequest_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<double>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<double>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<double>::stream(s, indent + "  ", v.Z);
    s << indent << "Rx: ";
    Printer<double>::stream(s, indent + "  ", v.Rx);
    s << indent << "Ry: ";
    Printer<double>::stream(s, indent + "  ", v.Ry);
    s << indent << "Rz: ";
    Printer<double>::stream(s, indent + "  ", v.Rz);
    s << indent << "useJointNear: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.useJointNear);
    s << indent << "jointNear: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.jointNear);
    s << indent << "user: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.user);
    s << indent << "tool: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tool);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_V4_BRINGUP_MESSAGE_INVERSEKINREQUEST_H
