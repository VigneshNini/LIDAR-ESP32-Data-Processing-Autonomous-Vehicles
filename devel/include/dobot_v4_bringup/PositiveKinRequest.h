// Generated by gencpp from file dobot_v4_bringup/PositiveKinRequest.msg
// DO NOT EDIT!


#ifndef DOBOT_V4_BRINGUP_MESSAGE_POSITIVEKINREQUEST_H
#define DOBOT_V4_BRINGUP_MESSAGE_POSITIVEKINREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dobot_v4_bringup
{
template <class ContainerAllocator>
struct PositiveKinRequest_
{
  typedef PositiveKinRequest_<ContainerAllocator> Type;

  PositiveKinRequest_()
    : J1(0.0)
    , J2(0.0)
    , J3(0.0)
    , J4(0.0)
    , J5(0.0)
    , J6(0.0)
    , user()
    , tool()  {
    }
  PositiveKinRequest_(const ContainerAllocator& _alloc)
    : J1(0.0)
    , J2(0.0)
    , J3(0.0)
    , J4(0.0)
    , J5(0.0)
    , J6(0.0)
    , user(_alloc)
    , tool(_alloc)  {
  (void)_alloc;
    }



   typedef double _J1_type;
  _J1_type J1;

   typedef double _J2_type;
  _J2_type J2;

   typedef double _J3_type;
  _J3_type J3;

   typedef double _J4_type;
  _J4_type J4;

   typedef double _J5_type;
  _J5_type J5;

   typedef double _J6_type;
  _J6_type J6;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _user_type;
  _user_type user;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tool_type;
  _tool_type tool;





  typedef boost::shared_ptr< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PositiveKinRequest_

typedef ::dobot_v4_bringup::PositiveKinRequest_<std::allocator<void> > PositiveKinRequest;

typedef boost::shared_ptr< ::dobot_v4_bringup::PositiveKinRequest > PositiveKinRequestPtr;
typedef boost::shared_ptr< ::dobot_v4_bringup::PositiveKinRequest const> PositiveKinRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator1> & lhs, const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator2> & rhs)
{
  return lhs.J1 == rhs.J1 &&
    lhs.J2 == rhs.J2 &&
    lhs.J3 == rhs.J3 &&
    lhs.J4 == rhs.J4 &&
    lhs.J5 == rhs.J5 &&
    lhs.J6 == rhs.J6 &&
    lhs.user == rhs.user &&
    lhs.tool == rhs.tool;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator1> & lhs, const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dobot_v4_bringup

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9093bbd4794a45b9bae8400bb1a930f";
  }

  static const char* value(const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9093bbd4794a45bULL;
  static const uint64_t static_value2 = 0x9bae8400bb1a930fULL;
};

template<class ContainerAllocator>
struct DataType< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dobot_v4_bringup/PositiveKinRequest";
  }

  static const char* value(const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64  J1\n"
"float64  J2\n"
"float64  J3\n"
"float64  J4\n"
"float64  J5\n"
"float64  J6\n"
"string   user \n"
"string   tool \n"
;
  }

  static const char* value(const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.J1);
      stream.next(m.J2);
      stream.next(m.J3);
      stream.next(m.J4);
      stream.next(m.J5);
      stream.next(m.J6);
      stream.next(m.user);
      stream.next(m.tool);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositiveKinRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dobot_v4_bringup::PositiveKinRequest_<ContainerAllocator>& v)
  {
    s << indent << "J1: ";
    Printer<double>::stream(s, indent + "  ", v.J1);
    s << indent << "J2: ";
    Printer<double>::stream(s, indent + "  ", v.J2);
    s << indent << "J3: ";
    Printer<double>::stream(s, indent + "  ", v.J3);
    s << indent << "J4: ";
    Printer<double>::stream(s, indent + "  ", v.J4);
    s << indent << "J5: ";
    Printer<double>::stream(s, indent + "  ", v.J5);
    s << indent << "J6: ";
    Printer<double>::stream(s, indent + "  ", v.J6);
    s << indent << "user: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.user);
    s << indent << "tool: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tool);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOBOT_V4_BRINGUP_MESSAGE_POSITIVEKINREQUEST_H
