# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dobot_v4_bringup/CircleRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CircleRequest(genpy.Message):
  _md5sum = "436e19304d0b48bc7fa4d2de814ce0e5"
  _type = "dobot_v4_bringup/CircleRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool mode
float64 a
float64 b
float64 c
float64 d
float64 e
float64 f
float64 a2
float64 b2
float64 c2
float64 d2
float64 e2
float64 f2
int32 count
string[] paramValue
"""
  __slots__ = ['mode','a','b','c','d','e','f','a2','b2','c2','d2','e2','f2','count','paramValue']
  _slot_types = ['bool','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode,a,b,c,d,e,f,a2,b2,c2,d2,e2,f2,count,paramValue

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CircleRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = False
      if self.a is None:
        self.a = 0.
      if self.b is None:
        self.b = 0.
      if self.c is None:
        self.c = 0.
      if self.d is None:
        self.d = 0.
      if self.e is None:
        self.e = 0.
      if self.f is None:
        self.f = 0.
      if self.a2 is None:
        self.a2 = 0.
      if self.b2 is None:
        self.b2 = 0.
      if self.c2 is None:
        self.c2 = 0.
      if self.d2 is None:
        self.d2 = 0.
      if self.e2 is None:
        self.e2 = 0.
      if self.f2 is None:
        self.f2 = 0.
      if self.count is None:
        self.count = 0
      if self.paramValue is None:
        self.paramValue = []
    else:
      self.mode = False
      self.a = 0.
      self.b = 0.
      self.c = 0.
      self.d = 0.
      self.e = 0.
      self.f = 0.
      self.a2 = 0.
      self.b2 = 0.
      self.c2 = 0.
      self.d2 = 0.
      self.e2 = 0.
      self.f2 = 0.
      self.count = 0
      self.paramValue = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B12di().pack(_x.mode, _x.a, _x.b, _x.c, _x.d, _x.e, _x.f, _x.a2, _x.b2, _x.c2, _x.d2, _x.e2, _x.f2, _x.count))
      length = len(self.paramValue)
      buff.write(_struct_I.pack(length))
      for val1 in self.paramValue:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 101
      (_x.mode, _x.a, _x.b, _x.c, _x.d, _x.e, _x.f, _x.a2, _x.b2, _x.c2, _x.d2, _x.e2, _x.f2, _x.count,) = _get_struct_B12di().unpack(str[start:end])
      self.mode = bool(self.mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.paramValue = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.paramValue.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B12di().pack(_x.mode, _x.a, _x.b, _x.c, _x.d, _x.e, _x.f, _x.a2, _x.b2, _x.c2, _x.d2, _x.e2, _x.f2, _x.count))
      length = len(self.paramValue)
      buff.write(_struct_I.pack(length))
      for val1 in self.paramValue:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 101
      (_x.mode, _x.a, _x.b, _x.c, _x.d, _x.e, _x.f, _x.a2, _x.b2, _x.c2, _x.d2, _x.e2, _x.f2, _x.count,) = _get_struct_B12di().unpack(str[start:end])
      self.mode = bool(self.mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.paramValue = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.paramValue.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B12di = None
def _get_struct_B12di():
    global _struct_B12di
    if _struct_B12di is None:
        _struct_B12di = struct.Struct("<B12di")
    return _struct_B12di
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dobot_v4_bringup/CircleResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CircleResponse(genpy.Message):
  _md5sum = "ca16cfbd5443ad97f6cc7ffd6bb67292"
  _type = "dobot_v4_bringup/CircleResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 res
"""
  __slots__ = ['res']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       res

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CircleResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.res is None:
        self.res = 0
    else:
      self.res = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.res
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.res,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.res
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.res,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class Circle(object):
  _type          = 'dobot_v4_bringup/Circle'
  _md5sum = 'ea8941f1924ced8f040f9ac672c828e7'
  _request_class  = CircleRequest
  _response_class = CircleResponse
