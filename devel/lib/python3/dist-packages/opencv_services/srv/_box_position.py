# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opencv_services/box_positionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class box_positionRequest(genpy.Message):
  _md5sum = "56bbf0a053309bcc0970665e272a9876"
  _type = "opencv_services/box_positionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 box_id  # Request: ID of the selected box
"""
  __slots__ = ['box_id']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       box_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(box_positionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.box_id is None:
        self.box_id = 0
    else:
      self.box_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.box_id
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.box_id,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.box_id
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.box_id,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from opencv_services/box_positionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class box_positionResponse(genpy.Message):
  _md5sum = "beedaf09f28a23b8f0017b5719f68c68"
  _type = "opencv_services/box_positionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Point box_position  # Response: 3D position of the box
float32 width  # Width of the bounding box
float32 height  # Height of the bounding box
float32 angle  # Angle of the bounding box (missing field)



================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['box_position','width','height','angle']
  _slot_types = ['geometry_msgs/Point','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       box_position,width,height,angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(box_positionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.box_position is None:
        self.box_position = geometry_msgs.msg.Point()
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.angle is None:
        self.angle = 0.
    else:
      self.box_position = geometry_msgs.msg.Point()
      self.width = 0.
      self.height = 0.
      self.angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3f().pack(_x.box_position.x, _x.box_position.y, _x.box_position.z, _x.width, _x.height, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.box_position is None:
        self.box_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.box_position.x, _x.box_position.y, _x.box_position.z, _x.width, _x.height, _x.angle,) = _get_struct_3d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3f().pack(_x.box_position.x, _x.box_position.y, _x.box_position.z, _x.width, _x.height, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.box_position is None:
        self.box_position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.box_position.x, _x.box_position.y, _x.box_position.z, _x.width, _x.height, _x.angle,) = _get_struct_3d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3f = None
def _get_struct_3d3f():
    global _struct_3d3f
    if _struct_3d3f is None:
        _struct_3d3f = struct.Struct("<3d3f")
    return _struct_3d3f
class box_position(object):
  _type          = 'opencv_services/box_position'
  _md5sum = 'c4d9ed4c4ad20a023eed43221ee87e4a'
  _request_class  = box_positionRequest
  _response_class = box_positionResponse
